import java.util.*;
import java.util.regex.*;

public class JackKilburnProject {

    public static void main(String[] args) {

        // 5 Test Strings That Should Return as Valid
        String[] valids = { "The quick brown fox said \"hello Mr lazy dog\".",
                "The quick brown fox said hello Mr lazy dog.", "One lazy dog is too few, 13 is too many.",
                "One lazy dog is too few, thirteen is too many.", "How many \"lazy dogs\" are there?" };

        // 6 Test Strings That Should Return as Invalid
        String[] invalids = { "The quick brown fox said \"hello Mr. lazy dog\".",
                "the quick brown fox said hello Mr lazy dog.", "\"The quick brown fox said \"hello Mr lazy dog\".",
                "One lazy dog is too few, 12 is too many.", "Are there 11, 12, or 13 lazy dogs?",
                "There is no punctiation in this sentence" };

        // Running Valid Tests
        System.out.println("---------------Inputting Valid Test Strings---------------");
        for (int x = 0; x < valids.length; x++) {
            tests(valids[x], x + 1);
        }

        // Running Invalid Tests
        System.out.println();
        System.out.println("--------------Inputting Invalid Test Strings--------------");
        for (int x = 0; x < invalids.length; x++) {
            tests(invalids[x], x + 6);
        }

        // Running User Custom Tests
        System.out.println();
        System.out.println("----------------------Custom Tests-----------------------");

        // Creating a scanner to read user input
        Scanner sc = new Scanner(System.in);
        System.out.println();
        System.out.println("Would you like to test your own sentences?: Y/N");
        String answer = sc.nextLine();

        // An if statement to process user input
        if (answer.equals("Y")) {
            String userSentence;
            do {
                // A do while loop to continuously request and process user input
                System.out.println();
                System.out.println("Please enter your sentence or enter STOP at anytime to end tests");
                userSentence = sc.nextLine();
                System.out.println();

                // An if else statement
                if (userSentence.equals("STOP")) {

                } else {
                    tests(userSentence, 1);
                }
            } while (!userSentence.equals("STOP"));
        }

        sc.close();
    }

    public static void tests(String str, int testNo) {

        System.out.println();
        System.out.println("Test " + testNo + ": " + str);

        // Setting test criteria, a string must pass 5 tests to be validated
        int testsPassed = 0;

        // Creating a Regex pattern and matcher to validate the first character of the string is a capital letter
        Pattern test1 = Pattern.compile("(^[A-Z])");
        Matcher matcher = test1.matcher(str);
        boolean capsMatch = matcher.find();

        // An if else statement to pass or fail the string based on the result of the above Regex
        if (capsMatch) {
            testsPassed++;
        } else {
            System.out.println("Sentence does not begin with a Capital Letter");
        }

        // Setting a variable and creating a loop to count the number of quotation marks within a string
        int quoteCount = 0;

        for (int x = 0; x < str.length(); x++) {
            if (str.charAt(x) == '"') {
                quoteCount++;
            }
        }

        // Applying the modulus operator with a value of 2 to the quoteCount variable to test for an even number of quotation marks
        if ((quoteCount % 2) == 0) {
            testsPassed++;
        } else {
            System.out.println("Uneven amount of Quotation Marks");
        }

        // Creating a Regex pattern and matcher to validate the last character of the string is either a . ! or ?
        Pattern test3 = Pattern.compile("([?.!]$)");
        Matcher matcher2 = test3.matcher(str);
        boolean suffixMatch = matcher2.find();

        // An if else statement to pass or fail the string based on the result of the
        // above Regex
        if (suffixMatch) {
            testsPassed++;
        } else {
            System.out.println("Sentence does not end with either . ! or ?");
        }

        // Setting a variable and creating a loop to count the number of . ! and ? within a string
        int periodCount = 0;

        for (int x = 0; x < str.length(); x++) {
            if (str.charAt(x) == '.' || str.charAt(x) == '?' || str.charAt(x) == '!') {
                periodCount++;
            }
        }

        // An if else statement to pass or fail the string based on the result of the above Regex
        //As I have seperately tested to find a . ! or ? at the end of the sentence no false positives will occur if the only instance of one of these characters
        // occcurs outside the final character of the string
        if (periodCount < 2) {
            testsPassed++;
        } else {
            System.out.println("Contains either . ! or ? before the end of the sentence");
        }

        // Creating a Regex pattern and matcher to find any numeric representations of the numbers 0-12
        Pattern test5 = Pattern.compile("(\b[0-9]\b|1[0-2])");
        Matcher matcher3 = test5.matcher(str);
        boolean numMatch = matcher3.find();

        // An if else statement to pass or fail the string based on the result of the above Regex
        if (numMatch == false) {
            testsPassed++;
        } else {
            System.out.println("Contains numeric format of a number from 0-12");
        }

        // A final if else statement using the test criteria (the testPassed variable) to output the result of the string based on whether all 5 tests have been passed
        if (testsPassed == 5) {
            System.out.println("Result: Valid");
        } else {
            System.out.println("Result: Invalid");
        }
    }
}